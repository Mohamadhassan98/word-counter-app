{"version":3,"sources":["Input.js","serviceWorker.js","Result.js","index.js"],"names":["Input","props","errors","text","word","onTextChanged","event","setState","target","name","value","onNumberChanged","state","words","length","wordsError","onWordChanged","errorsOff","fieldNumber","textError","validate","isValid","trim","wordErrors","i","calculateResult","split","wordsCount","count","j","includes","push","submit","result","row","history","pathname","showFields","component","Grid","item","xs","TextField","id","variant","label","margin","fullWidth","error","helperText","onChange","Fragment","Container","maxWidth","container","alignItems","direction","justify","noValidate","autoComplete","this","multiline","rows","type","InputLabelProps","shrink","Button","onClick","onBlur","React","Component","Boolean","window","location","hostname","match","tableIcons","Add","forwardRef","ref","AddBox","Check","Clear","Delete","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowUpward","ThirdStateCheck","Remove","ViewColumn","Result","tableColumns","title","field","disableClick","editable","columns","data","options","rowStyle","alignContent","icons","router","exact","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3dfaf2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Container, TextField} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class Input extends React.Component {\r\n\r\n    errors = {\r\n        text: 'Text is empty!',\r\n        word: 'Word is empty!'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fieldNumber: '0',\r\n            text: '',\r\n            textError: '',\r\n            words: [],\r\n            wordsError: []\r\n        };\r\n    }\r\n\r\n    onTextChanged = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    onNumberChanged = (event) => {\r\n        if (event.target.value !== '' && event.target.value >= 0 && event.target.value <= 10) {\r\n            this.setState({\r\n                [event.target.name]: event.target.value\r\n            });\r\n            const words = this.state.words;\r\n            words.length = event.target.value;\r\n            const wordsError = this.state.wordsError;\r\n            wordsError.length = event.target.value;\r\n        }\r\n    };\r\n\r\n    onWordChanged = (event) => {\r\n        const words = this.state.words;\r\n        words[event.target.name] = event.target.value;\r\n        this.setState({\r\n            words: words\r\n        });\r\n    };\r\n\r\n    errorsOff = () => {\r\n        const wordsError = this.state.wordsError;\r\n        wordsError.length = 0;\r\n        wordsError.length = this.state.fieldNumber;\r\n        this.setState({\r\n            textError: '',\r\n            wordsError: wordsError\r\n        });\r\n    };\r\n\r\n    validate = () => {\r\n        let isValid = true;\r\n        if (!this.state.text || this.state.text.trim() === '') {\r\n            isValid = false;\r\n            this.setState({\r\n                textError: this.errors.text\r\n            });\r\n        }\r\n        const wordErrors = this.state.wordsError;\r\n        for (let i = 0; i < this.state.fieldNumber; i++) {\r\n            if (!this.state.words[i] || this.state.words[i].trim() === '') {\r\n                isValid = false;\r\n                wordErrors[i] = this.errors.word;\r\n            }\r\n        }\r\n        this.setState({\r\n            wordErrors: wordErrors\r\n        });\r\n        return isValid;\r\n    };\r\n\r\n    calculateResult = () => {\r\n        const words = this.state.text.split(' ');\r\n        const wordsCount = [];\r\n        for (let i = 0; i < this.state.fieldNumber; i++) {\r\n            let count = 0;\r\n            for (let j = 0; j < words.length; j++) {\r\n                if (words[j].includes(this.state.words[i])) {\r\n                    count++;\r\n                }\r\n            }\r\n            wordsCount.push(count);\r\n        }\r\n        return wordsCount;\r\n    };\r\n\r\n    submit = () => {\r\n        if (this.validate()) {\r\n            const result = this.calculateResult();\r\n            const state = [];\r\n            for (let i = 0; i < this.state.fieldNumber; i++) {\r\n                state.push({\r\n                    row: i,\r\n                    word: this.state.words[i],\r\n                    count: result[i]\r\n                });\r\n            }\r\n            this.props.history.push({\r\n                pathname: '/result',\r\n                state: state\r\n            });\r\n        }\r\n    };\r\n\r\n    showFields = () => {\r\n        let component = [];\r\n        for (let i = 0; i < this.state.fieldNumber; i++) {\r\n            component.push(\r\n                <Grid item xs>\r\n                    <TextField\r\n                        name={i}\r\n                        id={i}\r\n                        variant='outlined'\r\n                        label={`word ${i + 1}`}\r\n                        value={this.state.words[i]}\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        error={this.state.wordsError[i]}\r\n                        helperText={this.state.wordsError[i] ? this.state.wordsError[i] : ' '}\r\n                        onChange={this.onWordChanged}\r\n                    />\r\n                </Grid>\r\n            );\r\n        }\r\n        return component;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Container maxWidth='sm'>\r\n                    <Grid container alignItems='center' direction='column' justify='center'>\r\n                        <form noValidate autoComplete='off'>\r\n                            <Grid item xs>\r\n                                <TextField\r\n                                    name='text'\r\n                                    fullWidth\r\n                                    error={this.state.textError}\r\n                                    helperText={this.state.textError ? this.state.textError : ' '}\r\n                                    variant='outlined'\r\n                                    onChange={this.onTextChanged}\r\n                                    id=\"text\"\r\n                                    label=\"Input text\"\r\n                                    multiline\r\n                                    rows=\"4\"\r\n                                    value={this.state.text}\r\n                                    margin=\"normal\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                <TextField\r\n                                    name='fieldNumber'\r\n                                    id=\"fieldNumber\"\r\n                                    variant='outlined'\r\n                                    label=\"Words\"\r\n                                    value={this.state.fieldNumber}\r\n                                    type=\"number\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true\r\n                                    }}\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    onChange={this.onNumberChanged}\r\n                                />\r\n                            </Grid>\r\n                            {this.showFields()}\r\n                            <Grid item xs>\r\n                                {this.state.fieldNumber === '0' ? '' :\r\n                                    <Button\r\n                                        fullWidth\r\n                                        onClick={this.submit}\r\n                                        onBlur={this.errorsOff}\r\n                                        variant=\"outlined\">\r\n                                        See result\r\n                                    </Button>}\r\n                            </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component, forwardRef} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MaterialTable from \"material-table\";\r\nimport {\r\n    Delete,\r\n    ViewColumn,\r\n    AddBox,\r\n    ArrowUpward,\r\n    Check,\r\n    ChevronLeft,\r\n    ChevronRight,\r\n    Clear,\r\n    Edit,\r\n    FilterList,\r\n    FirstPage,\r\n    LastPage,\r\n    Remove,\r\n    SaveAlt,\r\n    Search\r\n} from \"@material-ui/icons\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Delete: forwardRef((props, ref) => <Delete {...props} ref={ref}/>),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\r\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref}/>),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\r\n};\r\n\r\nexport default class Result extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.tableColumns = [\r\n            {title: 'Row', field: 'row', type: 'numeric', disableClick: true, editable: 'never'},\r\n            {title: 'Word', field: 'word', disableClick: true, editable: 'never'},\r\n            {title: 'Count', field: 'count', type: 'numeric', disableClick: true, editable: 'never'}\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Container maxWidth=\"sm\">\r\n                    <MaterialTable\r\n                        columns={this.tableColumns}\r\n                        data={this.props.location.state}\r\n                        options={{\r\n                            rowStyle: {\r\n                                alignContent: \"center\",\r\n                                alignItems: \"center\"\r\n                            }\r\n                        }}\r\n                        icons={tableIcons} title='Results'/>\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './index.css';\nimport Input from \"./Input\";\nimport * as serviceWorker from './serviceWorker';\nimport Result from \"./Result\";\n\nconst router = (\n    <Router>\n        <Switch>\n            <Route exact path='/' component={Input}/>\n            <Route path='/result' component={Result}/>\n        </Switch>\n    </Router>\n);\n\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}